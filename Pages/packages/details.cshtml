@page
@{    
    var package = await PackageData.GetAsync (RouteData.Values["id"], RouteData.Values["version"]);
    var authors = package.AuthorsOrOwners;

    var inputTargetFramework = (RouteData.Values["targetFramework"] ?? "").ToString().Trim();
    var framework = package.FindClosestTargetFramework (inputTargetFramework);

    var isContent = false;
    var content = default(PackageFile);
    var inputAssemblyName = (RouteData.Values["assemblyName"] ?? "").ToString().Trim();
    var asm = framework?.GetAssembly (RouteData.Values["dir"], inputAssemblyName);
    var isBuildAsm = "build".Equals(RouteData.Values["dir"]);
    var dir = isBuildAsm ? "build" : "lib";
    var asmDef = asm?.Definition;

    var types = asmDef != null ? (IEnumerable<Mono.Cecil.TypeDefinition>)asmDef.MainModule.Types : new Mono.Cecil.TypeDefinition[0];

    var namespaces = types.GroupBy(x => x.Namespace).OrderBy(x => x.Key).Where(x => !string.IsNullOrEmpty(x.Key)).ToList();

    var inputNamespace = (RouteData.Values["namespace"] ?? "").ToString().Trim();

    var ns = namespaces.FirstOrDefault (x => x.Key == inputNamespace);
    if (ns == null) {
        var publicNamespaces = namespaces.Where(n => n.Any(x => x.IsPublic)).OrderByDescending(n => n.Count(x => x.IsPublic));
        ns = publicNamespaces.FirstOrDefault ();
        if (ns == null) {
            ns = namespaces.FirstOrDefault ();
        }
    }

    var inputTypeName = (RouteData.Values["typeName"] ?? "").ToString().Trim();

    var typ = ns?.FirstOrDefault(x => x.Name == inputTypeName);
    var docs = typ != null ? asm?.GetTypeDocumentation(typ) : null;

    var q = Request.Query["q"].FirstOrDefault() ?? "";
    var eq = q.Length > 0 ? "?q=" + Uri.EscapeDataString (q) : "";

    var inputCode = Request.Query["code"].FirstOrDefault() ?? "";
    var code = "true".Equals(inputCode);

    var hasApi = framework != null;
    var hasContent = package != null && package.Content.Count > 0;
    var hasTools = package != null && package.Tools.Count > 0;
    var hasFiles = hasContent || hasTools;

    var nupkgName = package.Id + "." + package.Version + ".nupkg";

    var showKlass = "package";
    var title = typ != null ? typ.FullName : package.Id + " " + package.Version;
    var description = package.Description;

    if (typ != null && typ.Name.Equals (inputTypeName, StringComparison.InvariantCultureIgnoreCase)) {
        showKlass = "type";
        title = typ.FullName;
        description = $"Type with {typ.Fields.Count} fields and {typ.Methods.Count} methods";
        if (docs != null && !string.IsNullOrEmpty (docs.SummaryText)) {
            description += "\n\n" + docs.SummaryText;
        }
    }
    else if (ns != null && ns.Key.Equals (inputNamespace, StringComparison.InvariantCultureIgnoreCase)) {
        showKlass = "namespace";
        title = ns.Key;
        description = $"Namespace with {ns.Count():#,0} types";
    }
    else if (asmDef != null && asm.FileName.Equals (inputAssemblyName, StringComparison.InvariantCultureIgnoreCase)) {
        showKlass = "assembly";
        title = asm.FileName ?? asmDef.Name.Name;
        description = $"Assembly with {types.Count():#,0} types ({asm.SizeInBytes:#,0} bytes)";
    }

    string GetIcon(object o) {
        if (o == null) return "";
        if (o is PackageAssembly) return "file";
        if (o is Mono.Cecil.TypeDefinition t) {
            var isPublic = t.IsPublic;
            var isEnum = t.IsEnum;
            var isStruct = !isEnum && t.IsValueType;
            var isDel = !(isEnum || isStruct) && t.IsDelegate();
            var isIface = !(isEnum || isStruct || isDel) && (t.IsInterface || t.IsAbstract);
            return isEnum ? "menu-hamburger" : (isDel ? "flash" : (isStruct ? "unchecked" : (isIface ? "star-empty" : "star")));
        }
        if (o is System.Linq.IGrouping<string, Mono.Cecil.TypeDefinition> g) {
            return "book";
        }
        if (o is PackageDependency d) return "briefcase";
        if (o is PackageData p) return "briefcase";
        if (o is PackageFile f) return "file";
        return "";
    }

    string GetUrl(object oid = null, object oversion = null, object otargetFramework = null, object odir = null, object oassemblyName = null, object onamespace = null, object otypeName = null, object ocode = null) {
        oid = (oid ?? package?.Id) ?? RouteData.Values["id"];
        oversion = (oversion ?? package?.Version) ?? RouteData.Values["version"];
        otargetFramework = (otargetFramework ?? framework?.Moniker) ?? RouteData.Values["targetFramework"];
        odir = (odir ?? dir) ?? RouteData.Values["dir"];
        oassemblyName = (oassemblyName ?? asm?.FileName) ?? RouteData.Values["assemblyName"];
        onamespace = (onamespace ?? ns?.Key) ?? RouteData.Values["namespace"];
        otypeName = otypeName ?? RouteData.Values["typeName"];
        ocode = ocode ?? Request.Query["code"].FirstOrDefault();
        var r = "/packages";
        if (oid != null) {
            r += "/" + Uri.EscapeDataString(oid.ToString());
            if (oversion != null) {
                r += "/" + Uri.EscapeDataString(oversion.ToString());
                if (odir != null) {
                    r += "/" + Uri.EscapeDataString(odir.ToString());
                    if (otargetFramework != null) {
                        r += "/" + Uri.EscapeDataString(otargetFramework.ToString());
                        if (oassemblyName != null) {
                            r += "/" + Uri.EscapeDataString(oassemblyName.ToString());
                            if (onamespace != null) {
                                r += "/" + Uri.EscapeDataString(onamespace.ToString());
                                if (otypeName != null) {
                                    r += "/" + Uri.EscapeDataString(otypeName.ToString());
                                }
                            }
                        }
                    }
                }
            }
        }
        r += eq;
        if ("true".Equals(ocode)) {
            if (eq.Length > 0) r += "&code=true";
            else r += "?code=true";
        }
        return r;
    }

    ViewData["Title"] = title;
    ViewData["q"] = q;

    ViewData["meta"] = new Dictionary<string, string> {
        { "twitter:card", "summary" },
        { "og:url", Request.GetEncodedUrl () },
        { "og:title", title },
        { "og:description", description },
        { "og:image", package.IconUrl },
    };
}

<header>
<h1>@if (!string.IsNullOrEmpty(package.IconUrl)) {
        <a href="/packages/@Uri.EscapeDataString(package.Id)">
            <img src="@package.IconUrl" width="64" height="64" style="margin-top:5px;margin-left:-84px;float:left" />
        </a>
    }
    <a href="/packages/@Uri.EscapeDataString(package.Id)">@package.Id</a>
    <small>@package.Version
    @if (!string.IsNullOrEmpty(authors)) {
        <small style="">by @authors</small>
    }
    </small>
</h1>

<nav>
    <a href="@package.DownloadUrl" type="button" class="btn btn-default" style="color:#777">
    <span class="glyphicon glyphicon-download" aria-hidden="true"></span> @nupkgName
    </a>
    @if (!string.IsNullOrEmpty(package.ProjectUrl)) {
        <a href="@package.ProjectUrl" type="button" class="btn btn-default" style="color:#777">
            <span class="glyphicon glyphicon-link" aria-hidden="true"></span> Project Site
        </a>
    }
    <a href="https://www.nuget.org/packages/@package.Id/@package.Version" type="button" class="btn btn-default" style="color:#777">
        <span class="glyphicon glyphicon-link" aria-hidden="true"></span> NuGet Gallery
    </a>
</nav>

<div class="code" style="background-color:#f5f5f5;border-radius:0.5em;margin-top:1em;margin-bottom:1em;">&lt;<span class="c-pr">PackageReference</span> <span class="c-tr">Include</span>=<span class="c-st" style="font-weight:bold">"@package.Id"</span> <span class="c-tr">Version</span>=<span class="c-st" style="font-weight:bold">"@package.Version"</span> /&gt;</div>

@if (package.Error != null) {
    <div style="margin-top:2em">
        <h2>Error reading package</h2>
        <pre>@package.Error</pre>
    </div>
}

@if (package.TargetFrameworks.Count > 0) {
    <nav style="margin-top:0em;line-height:2.75em;">
        <h4 style="margin-top:0.5em;color:#777;display:inline-block;margin-right:0.5em;padding:0;">Frameworks</h4>
    @foreach (var tf in package.TargetFrameworks) {
        var active = tf.Moniker == framework.Moniker ? "active" : "";
        var color = tf.Moniker.StartsWith("netstandard") ? "success" : 
                    (tf.Moniker.StartsWith("net") ? "info" :
                    (tf.Moniker.StartsWith("portable") ? "warning" : "primary"));
        var bold = active == "active" ? "bold" : "normal";
        var tcolor = active == "active" ? "color:#fff" : "color:rgba(255,255,255,0.75)";
        <a class="btn btn-@color btn-sm @active" style="font-weight:@bold;@tcolor" role="button"
           href="@GetUrl(otargetFramework:tf.Moniker)">@tf.Moniker</a>
    }
    </nav>
}

@if (framework != null && framework.Dependencies.Count > 0) {
    <nav style="margin-top:0em;line-height:2.75em;">
        <h4 style="margin-top:0.5em;color:#777;display:inline-block;margin-right:0.5em;padding:0;">Dependencies</h4>
    @foreach (var d in framework.Dependencies.OrderBy(x => x.PackageId)) {
        <a class="btn btn-default btn-sm" style="color:#777"
            href="/packages/@Uri.EscapeDataString(d.PackageId)/@Uri.EscapeDataString(d.VersionSpec)@eq">
            <span class="glyphicon glyphicon-@GetIcon(d)" aria-hidden="true"></span>&nbsp;@d.PackageId</a>
    }
    </nav>
}

<hr style="margin-top:2em;" />
</header>

<div id="api" class="row" style="margin-bottom:4em;">
<div class="col-xs-12 col-sm-3 sidenav">
@if (hasApi) {
    <h3 style="color:#777;margin-top:0em;margin-bottom:0em">.NET API <small style="color:#777;">@framework.SizeInBytes.ToString("#,0") bytes</small></h3>
    
}
else {
    <h3 style="color:#777;margin-top:0em;margin-bottom:0em">Package Files</h3>
    <small style="color:#777;">@((package.Content.Sum(x=>x.SizeInBytes)+package.Tools.Sum(x=>x.SizeInBytes)).ToString("#,0")) bytes</small>
}

<form class="form-inline" style="margin-top: 0.5em;">
    <input id="asearch" type="search" class="form-control" placeholder="Search"
        autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"
        style="margin-bottom:1em;" />
</form>

<nav id="anav">

@if (framework != null && framework.Assemblies.Count > 0) {
    <h4>Assemblies</h4>
    <ul style="max-height:10em;overflow:scroll;list-style-type:none;padding:0;white-space:nowrap">
    @foreach (var a in framework.Assemblies.OrderBy(x => x.FileName)) {
        var bold = !isBuildAsm && a.FileName == asm?.FileName ? "bold" : "normal";
        var color = bold == "bold" ? "#000" : "#777";
        <li>
            <a style="font-weight:@bold;color:@color;"
                href="/packages/@Uri.EscapeDataString(package.Id)/@Uri.EscapeDataString(package.Version)/lib/@Uri.EscapeDataString(framework.Moniker)/@Uri.EscapeDataString(a.FileName)@eq">
                <span class="glyphicon glyphicon-@GetIcon(a)" aria-hidden="true"></span>&nbsp;@a.FileName</a>
        </li>
    }
    </ul>
}
@if (framework != null && framework.BuildAssemblies.Count > 0) {
    <h4>Build Assemblies</h4>
    <ul style="max-height:10em;overflow:scroll;list-style-type:none;padding:0;white-space:nowrap">
    @foreach (var a in framework.BuildAssemblies.OrderBy(x => x.FileName)) {
        var bold = isBuildAsm && a.FileName == asm?.FileName ? "bold" : "normal";
        var color = bold == "bold" ? "#000" : "#777";
        <li>
            <a style="font-weight:@bold;color:@color;"
                href="/packages/@Uri.EscapeDataString(package.Id)/@Uri.EscapeDataString(package.Version)/build/@Uri.EscapeDataString(framework.Moniker)/@Uri.EscapeDataString(a.FileName)@eq">
                <span class="glyphicon glyphicon-@GetIcon(a)" aria-hidden="true"></span>&nbsp;@a.FileName</a>
        </li>
    }
    </ul>
}
@if (asmDef != null && namespaces != null && namespaces.Count > 0) {
    <h4>Namespaces</h4>
    <ul style="max-height:10em;overflow:scroll;list-style-type:none;padding:0;white-space:nowrap">
    @foreach (var n in namespaces) {
        var bold = n.Key == ns?.Key ? "bold" : "normal";
        var isPublic = n.Any(x => x.IsPublic);
        var color = bold == "bold" ? "#000" : (isPublic ? "#777" : "#CCC");
        <li>
            <a style="font-weight:@bold;color:@color;"
                href="/packages/@Uri.EscapeDataString(package.Id)/@Uri.EscapeDataString(package.Version)/@Uri.EscapeDataString(dir)/@Uri.EscapeDataString(framework.Moniker)/@Uri.EscapeDataString(asm.FileName)/@Uri.EscapeDataString(n.Key)@eq">
                <span class="glyphicon glyphicon-@GetIcon(n)" aria-hidden="true"></span>&nbsp;@n.Key</a>
        </li>
    }
    </ul>
}
@if (ns != null) {
    <h4 id="types">Types</h4>
    <ul class="long-item-list">
    @foreach (var t in ns.OrderBy(x => x.Name)) {
        var bold = t.Name == typ?.Name ? "bold" : "normal";            
        var color = bold == "bold" ? "#000" : (t.IsPublic ? "#777" : "#CCC");
        var active = bold == "bold" ? "active" : "";
        <li>
            <a class="@active" style="font-weight:@bold;color:@color;"
                href="@GetUrl(otypeName:t.Name)">
                <span class="glyphicon glyphicon-@GetIcon(t)" aria-hidden="true"></span>&nbsp;@t.Name</a>
        </li>
    }
    </ul>
}
@if (package != null && package.Content.Count > 0) {
    <h4>Content</h4>
    <ul style="max-height:10em;overflow:scroll;list-style-type:none;padding:0;white-space:nowrap">
    @foreach (var a in package.Content.OrderBy(x => x.FileName)) {
        var bold = a.FileName == content?.FileName ? "bold" : "normal";
        var color = bold == "bold" ? "#000" : "#777";
        <li>
            <a style="font-weight:@bold;color:@color;"
                href="/packages/@Uri.EscapeDataString(package.Id)/@Uri.EscapeDataString(package.Version)/content/@a.ArchiveEntry.FullName.Substring(8)@eq">
                <span class="glyphicon glyphicon-@GetIcon(a)" aria-hidden="true"></span>&nbsp;@a.ArchiveEntry.FullName.Substring(8)</a>
        </li>
    }
    </ul>
}
@if (package != null && package.Tools.Count > 0) {
    <h4>Tools</h4>
    <ul style="max-height:10em;overflow:scroll;list-style-type:none;padding:0;white-space:nowrap">
    @foreach (var a in package.Tools.OrderBy(x => x.FileName)) {
        var bold = a.FileName == content?.FileName ? "bold" : "normal";
        var color = bold == "bold" ? "#000" : "#777";
        <li>
            <a style="font-weight:@bold;color:@color;"
                href="/packages/@Uri.EscapeDataString(package.Id)/@Uri.EscapeDataString(package.Version)/tools/@a.ArchiveEntry.FullName.Substring(6)@eq">
                <span class="glyphicon glyphicon-@GetIcon(a)" aria-hidden="true"></span>&nbsp;@a.ArchiveEntry.FullName.Substring(6)</a>
        </li>
    }
    </ul>
}
</nav>
</div>
<div class="col-xs-12 col-sm-9" id="code">
<article>
@if (showKlass == "type") {
    <h1 id="type" style="margin-top:0"><span class="glyphicon glyphicon-@GetIcon(typ)" aria-hidden="true"></span>&nbsp;@typ.Name</h1>
    <p style="overflow:scroll;white-space:pre-wrap;word-wrap:normal;max-height:10em;font-size:120%;margin-bottom:1.25em;border:none;background-color:inherit;font-family:inherit;padding:0;">@description</p>
    <ul class="nav nav-tabs" role="tablist">
        <li role="presentation" class="@(!code?"active":"")"><a href="@GetUrl(ocode:"false")" aria-controls="documentation" role="tab" data-toggle="tab">Documentation</a></li>
        <li role="presentation" class="@(code?"active":"")"><a href="@GetUrl(ocode:"true")" aria-controls="code" role="tab" data-toggle="tab">Code</a></li>
    </ul>
    if (docs != null) {
    if (code) {
        @Html.Raw(await docs.GetTypeCodeAsync(typ))
    }
    else {
        @Html.Raw(await docs.GetTypeInterfaceCodeAsync(typ))
    }
    }
}
else if (showKlass == "namespace") {
    <h1 id="namespace" style="margin-top:0"><span class="glyphicon glyphicon-@GetIcon(ns)" aria-hidden="true"></span>&nbsp;@ns.Key</h1>
    <p style="overflow:scroll;white-space:pre-wrap;word-wrap:normal;max-height:10em;font-size:120%;margin-bottom:1.25em;border:none;background-color:inherit;font-family:inherit;padding:0;">@description</p>
}
else if (showKlass == "assembly") {
    <h1 id="assembly" style="margin-top:0"><span class="glyphicon glyphicon-@GetIcon(asm)" aria-hidden="true"></span>&nbsp;@asm.FileName <small>@asmDef.Name.Version</small></h1>
    <p style="overflow:scroll;white-space:pre-wrap;word-wrap:normal;max-height:10em;font-size:120%;margin-bottom:1.25em;border:none;background-color:inherit;font-family:inherit;padding:0;">@description</p>
}
else {
    <h1 id="package" style="margin-top:0"><span class="glyphicon glyphicon-@GetIcon(package)" aria-hidden="true"></span>&nbsp;@package.Id <small>@package.Version</small></h1>
    <p style="overflow:scroll;white-space:pre-wrap;word-wrap:normal;max-height:10em;font-size:120%;margin-bottom:1.25em;border:none;background-color:inherit;font-family:inherit;padding:0;">@description</p>
}
</article>
</div>
</div>
<script>
    var asearch = document.getElementById("asearch");
    var anav = document.getElementById("anav");
    if (asearch && anav) {
        var searchResults = {};
        var rhtml = null;
        function showResults(r) {
            function c(t) { return document.createElement(t); }
            function getIcon(t) {
                if (t == "type") return "star";
                if (t == "method") return "flash";
                return "minus";
            }
            function getColor(t) {
                if (t == "type") return "c-tr";
                if (t == "method") return "c-mr";
                if (t == "event") return "c-er";
                return "";
            }
            if (rhtml) rhtml.remove();
            rhtml = c("div");
            var h = c("h4");
            h.appendChild(document.createTextNode (r.results.length >= 100 ? "100+ Results" : r.results.length + " Results"));
            var ul = c("ul");
            ul.className = "long-item-list";
            rhtml.appendChild(h);
            rhtml.appendChild(ul);
            r.results.forEach(function(e) {
                var li = c("li");
                var a = c("a");
                var g = c("span");
                var sm = c("small");
                sm.appendChild(document.createTextNode (e.parent));
                g.className = "glyphicon glyphicon-" + getIcon(e.type);
                li.appendChild(a);
                a.className = "link " + getColor(e.type);
                a.appendChild(g);
                a.appendChild(document.createTextNode (" " + e.name + " "));
                a.appendChild(sm);
                a.href = e.link;
                ul.appendChild(li);
            });
            anav.hidden = true;
            asearch.parentElement.appendChild (rhtml);
        }
        function hideResults() {
            if (rhtml) rhtml.remove ();
            anav.hidden = false;
        }
        function queryResults(text, k) {
            var req = new XMLHttpRequest();
            req.addEventListener("load", function (e) {
                if (req.readyState == 4) {
                    var r = JSON.parse(req.responseText);
                    k(r);
                }
            });
            req.open("GET", "/api/searchpackage?p=@Uri.EscapeDataString(package.Id)&v=@Uri.EscapeDataString(package.Version)&q=" + encodeURIComponent(text));
            req.send();
        }
        function doSearch() {
            var text = (asearch.value+"").trim();
            if (text.length == 0) {
                hideResults();
            }
            else if (searchResults[text]) {
                showResults(searchResults[text]);
            }
            else {
                queryResults(text, function(r) {
                    searchResults[text] = r;
                    if ((asearch.value+"").trim() == text) {
                        showResults(r);
                    }
                });
            }
        }
        asearch.addEventListener("input", function (e) {
            doSearch();
        });
    }
</script>
